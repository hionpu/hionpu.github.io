[
  
  {
    "title": "Setting Up a GitHub Blog (4) - Supporting Multiple Languages with Polyglot",
    "url": "/posts/github_blog_4",
    "categories": "[GitHub, jekyll]",
    "tags": "blog, chirpy, #polyglot, #multilanguage",
    "date": "2023-12-14 00:00:00 +0900",
    





    
    "snippet": "Series Post Links(1) Creating a Repository and Testing the Page(2) Applying the Chirpy Theme(3) Uploading Posts(4) Supporting Multiple Languages(5) Creating a Sitemap1. IntroductionI decided to sup...",
    "content": "Series Post Links(1) Creating a Repository and Testing the Page(2) Applying the Chirpy Theme(3) Uploading Posts(4) Supporting Multiple Languages(5) Creating a Sitemap1. IntroductionI decided to support multiple languages on my blog because it’s not too difficult to upload English posts after getting them translated by GPT and doing some proofreading myself, aiming to attract English-speaking visitors. From my perspective, supporting multiple languages means:  Being searchable in search engines in the respective language.  Or, even if the page appears in Korean in search results, being able to change the language with a language switch button.Additionally, it would be better if:  Each page could be managed with a permalink within the same site.After some research, I found that using the Jekyll plugin called polyglot could meet these conditions.2. Installing the Polyglot Plugin2-1. Installing the PluginIn the Shell, go to my_blog_root_directory/ and install the plugin with:gem install jekyll-polyglot2-2. Modifying _config.ymlAfter installation, open _config.yml and add - jekyll-polyglot under the plugins: tab like this:plugins:  - jekyll-polyglotAlso, change the language settings by finding the languages: tab and modifying it as follows:languages: [\"en\", \"ko\"] # Languages you want to supportdefault_lang: \"ko\" # Default language of the contentexclude_from_localization: ['javascript', 'images', 'css', 'sitemap.xml'] # Folders to exclude from multilingual functionalityparallel_localization: false # Not very significantFor languages other than Korean and English, you can add them by referring to the 639-1 codes from List of ISO 639-1 codes - Wikipedia.3. Modifying .md FilesAs mentioned earlier, for multilingual support, you need to set permalink: for each post in _config.yml. This is what we will do here. In the property of the .md file you are uploading in the yyyy-mm-dd-title format, add:lang: [language of the page]permalink: [URL of the page]For example, the URL of this post I am writing now, based on the default language (ko in _config.yml), is hionpu.com/posts/github_blog_4. Since it supports relative paths, you can write it as:---    ...lang: kopermalink: /posts/github_blog_4    ...---For English, just change the lang: part to en. Then, when Jekyll builds, the Korean page will be at hionpu.com/posts/github_blog_4, and the English page will be at hionpu.com/en/posts/github_blog_4.Now, let’s build and see. If the build is successful and pages for each language are displayed correctly locally, it’s a success. However, I encountered an error.4. Polyglot Dependency IssueAn error like the one above occurred.(Text)  Dependency Error: Yikes! It looks like you don’t have jekyll-polyglot or one of its dependencies installed. In order to use Jekyll as currently configured, you’ll need to install this gem. If you’ve run Jekyll with bundle exec, ensure that you have included the jekyll-polyglot gem in your Gemfile as well. The full error message from Ruby is: ‘cannot load such file – jekyll-polyglot’ If you run into trouble, you can find helpful resources at https://jekyllrb.com/help/!  C:/Users/user/.local/share/gem/ruby/3.2.0/gems/jekyll-4.3.2/lib/jekyll/external.rb:70:in `rescue in block in require_with_graceful_fail’: jekyll-polyglot (Jekyll::Errors::MissingDependencyException)It seemed to be a dependency issue with polyglot.I tried updating the gem, bundle, and polyglot, but the issue persisted. So, I asked GPT about the error as is, and it suggested modifying the Gemfile. I opened the Gemfile in an editor and added:gem \"jekyll-polyglot\"This resolved the specific error, but another error occurred.(Text)  C:/Users/user/.local/share/gem/ruby/3.2.0/gems/jekyll-polyglot-1.7.0/lib/jekyll/polyglot/patches/jekyll/site.rb:215:in `relative_url_regex’: target of repeat operator is not specified: /href=”?\\/((?:(?!.gem)(?!.gemspec)(?!docs)(?!tools)(?!README.md)(?!LICENSE)(?!rollup.config.js)(?!package.json)(?!.sass-cache)(?!.jekyll-cache)(?!gemfiles)(?!Gemfile)(?!Gemfile.lock)(?!node_modules)(?!vendor\\/bundle\\/)(?!vendor\\/cache\\/)(?!vendor\\/gems\\/)(?!vendor\\/ruby\\/)(?!javascript)(?!images)(?!css)(?!ja\\/)(?!ko\\/)(?!en\\/)[^,’“\\s\\/?.]+.?)(?:\\/[^][)(“‘\\s]*)?)”/ (RegexpError)The error was related to regular expressions, and when I opened the site.rb file in an editor and went to the specified line (215), I found a function containing a regular expression like this:def relative_url_regex(disabled = false)  regex = ''  unless disabled    @exclude.each do |x|      regex += \"(?!#{x})\"    end    @languages.each do |x|      regex += \"(?!#{x}\\/)\"    end  end  start = disabled ? 'ferh' : 'href'  %r{#{start}=\"?#{@baseurl}/((?:#{regex}[^,'\"\\s/?.]+\\.?)*(?:/[^\\]\\[)(\"'\\s]*)?)\"}endThe error was occurring in this part.Since I didn’t want to learn regular expressions just to solve this and asked GPT for help, it instructed me to modify it to:def relative_url_regex(disabled = false)  regex = ''  unless disabled    @exclude.each do |x|      escaped_x = Regexp.escape(x)      regex += \"(?!#{escaped_x})\"    end    @languages.each do |x|      escaped_x = Regexp.escape(x)      regex += \"(?!#{escaped_x}\\/)\"    end  end  start = disabled ? 'ferh' : 'href'  %r{#{start}=\"?#{@baseurl}/((?:#{regex}[^,'\"\\s/?.]+\\.?)*(?:/[^\\]\\[)(\"'\\s]*)?)\"}endThe change was:regex += \"(?!#{x})\"andregex += \"(?!#{x}\\/)\"toescaped_x = Regexp.escape(x)regex += \"(?!#{escaped_x})\"Using Regexp.escape() to replace x with escaped_x.The cause of the error, according to GPT, could be the complexity of regular expressions and failure to reflect changes in versions. However, I remember the post I referred to for applying polyglot was written around August 2023, so was there a change in just a few months?Anyway, after applying the above changes, the build was successful, and both Korean and English content were displayed correctly in one post.If your blog is built locally in _site and then pushed and deployed remotely, this method should work. However, the Chirpy theme builds separately on the remote via GitHub Action and deploys the created _site, so this method does not apply.5. If Errors Occur in GitHub Build5-1. CauseChirpy, which builds and deploys via GitHub Action, still throws the same error during the build process in the Action tab, even if you follow the method mentioned above.As just mentioned, even if you modify locally, the GitHub Action build refers to the Gemfile pushed locally and loads the plugin into the Ubuntu virtual machine, so the changes made locally are not reflected. So, what should be done?5-2. Setting Up to Use the Modified Plugin in the Ubuntu Virtual EnvironmentIn 4. Polyglot Dependency Issue, we added polyglot to the Gemfile. Plugins added this way seem to use the Git repository of that plugin by default. If you modify the polyglot plugin part of the Gemfile to:gem 'jekyll-polyglot', git: 'https://github.com/hionpu/polyglot', branch: 'master'Now, the polyglot plugin will refer to the master branch of the https://github.com/hionpu/polyglot repository. This means you now have your own polyglot repository, which you can clone ⟶ modify ⟶ push to use your own polyglot plugin even when building remotely.Of course, you can copy and paste the above Gemfile modification to use my (the author’s) modified polyglot. Alternatively, you can fork the original repository of the polyglot plugin at:  untra/polyglot: :abc: Multilingual and i18n support tool for Jekyll Blogs (github.com)Then clone it locally, make your modifications, and set it to refer to that repository.After completing all the above steps, run:bundleThen push your blog and check if the build and deployment are successful.  If another error occurs, please leave a comment. I will try my best to respond.Next Article(5) Creating a Sitemap"
  },
  
  {
    "title": "Liquid curly bracket 그대로 표시하기",
    "url": "/posts/liquid_curly_bracket",
    "categories": "html",
    "tags": "#html, #liquid, #escape, #curlybracket",
    "date": "2023-12-11 00:00:00 +0900",
    





    
    "snippet": "1. html 문법에서  &#38;#123; 와&#38;#125;를 사용하는 것이 가장 편한것 같다. 문제는 코드 블럭 안에 {{ something }} 를 넣어야 할 때이다.2. .md파일이 html로 변경될 상황에서 코드블럭 내부의 이중 curly bracket를 사용하면 된다.",
    "content": "1. html 문법에서  &#38;#123; 와&#38;#125;를 사용하는 것이 가장 편한것 같다. 문제는 코드 블럭 안에 {{ something }} 를 넣어야 할 때이다.2. .md파일이 html로 변경될 상황에서 코드블럭 내부의 이중 curly bracket를 사용하면 된다."
  },
  
  {
    "title": "Setting Up a GitHub Blog (3) - Upload a Post",
    "url": "/posts/github_blog_3",
    "categories": "[GitHub, jekyll]",
    "tags": "#github, blog, chirpy",
    "date": "2023-12-11 00:00:00 +0900",
    





    
    "snippet": "Series Post Links(1) Creating a Repository and Testing the Page(2) Applying the Chirpy Theme(3) Upload a Post(4) Implementing Multilingual Support(5) Creating a Sitemap1. Format and Location for Po...",
    "content": "Series Post Links(1) Creating a Repository and Testing the Page(2) Applying the Chirpy Theme(3) Upload a Post(4) Implementing Multilingual Support(5) Creating a Sitemap1. Format and Location for Post FilenamesTo post an article, use the format  2023-12-11-title-of-post.mdfor the Markdown file, and place these .md files in the _post folder.When Jekyll builds, it compiles all .md files stored in the blog root folder/_posts (including those in folders within _posts) into .html files and places them in the _site folder. The .html files in the _site folder become the pages visible when deployed (or on localhost:4000). However, the filenames and subpaths in the _site folder do not exactly match those in _posts, as they are influenced by the permalink: property in _config.yml, which is a global setting. This can be overridden in the .md file by specifying permalink: path under properties. This aspect is particularly important when using the polyglot plugin for Jekyll to support multiple languages, which requires specifying a permalink for each post. For now, we will leave it as is.2. Write a PostWhen clicking on an uploaded post to read it, the right panel displays recent updates, tags, and table of contents. Chirpy theme automatically generates this table of contents from headers like # during the Jekyll build. I’ve used tocbot for some customization in this area, but more on that later. It’s important to note that headers are recognized, and a table of contents is generated.More crucial is writing the properties section of the Markdown file. Let’s explain using the properties from the previous post’s .md file as an example.---title: Setting Up a GitHub Blog (1) - Creating a Repository and Checking the Test Pagedate: 2023-12-04 15:22lastmod: 2023-12-07 15:56tags:  - \"#github\"  - \"#blog\"  - \"#jekyll\"  - \"#polyglot\"categories:  - \"[GitHub, jekyll]\"lang: enpermalink: /posts/Github_blog_1pin: truemath: truemermaid: true---  title: is the title displayed on the blog.  date: is the creation date in the format YYYY-MM-DD HH:MM.  lastmod: is the most recent modification date, which is convenient for sitemap creation. If it feels tedious, just keep it the same as the creation date.  tags: are used for categorization. Chirpy theme sorts posts by tags in the TAGS tab.  categories: similar to tags, also used for categorization in chirpy, akin to folders.  lang: necessary for multilingual support. Pages are created for each language listed in the _config.yml’s language attribute.  permalink: overrides the global permalink setting from _config.yml.  pin:, math:, mermaid: provide additional features. In chirpy theme, posts typically have these set to true.Now, copy and paste the below template, filling in each attribute. I use Obsidian as a markdown editor. Using {{date}} {{time}} in the template inputs the timestamp at the time of writing.---title: tags: categories: createdAt: {{ date }} {{ time }}lastmod: {{ date }} {{ time }}lang: kopermalink: /posts/pin: truemath: truemermaid: true---3. Save the file in _posts, Push, Build, and DeployAs mentioned earlier, put the .md file in the local root folder/_posts, then build and check it locally first.bundle exec jekyll serveGo to localhost:4000 to confirm, and if the post displays correctly, push it, then check the automatically built and deployed page.Next Article(4) Implementing Multilingual Support"
  },
  
  {
    "title": "Setting Up a GitHub Blog (2) - Applying the Chirpy Theme",
    "url": "/posts/github_blog_2",
    "categories": "[GitHub, jekyll]",
    "tags": "#github, #blog, #chirpy",
    "date": "2023-12-07 16:04:00 +0900",
    





    
    "snippet": "Series Post Links(1) Creating a Repository and Testing the Page(2) Applying the Chirpy Theme (3) Uploading Posts(4) Supporting Multiple Languages(5) Creating a Sitemap1. Download the Chirpy Theme F...",
    "content": "Series Post Links(1) Creating a Repository and Testing the Page(2) Applying the Chirpy Theme (3) Uploading Posts(4) Supporting Multiple Languages(5) Creating a Sitemap1. Download the Chirpy Theme FilesYou can download the zip file from a site that collects themes, or fork it from the official Chirpy repository, but I chose to clone it.  Chirpy RepositoryAfter cloning, copy all the contents from the jekyll-theme-chirpy folder to your local repository (…/(your GitHub username).github.io). When prompted to overwrite, select Yes.2. Install Ruby and JekyllRuby  Ruby Installer Download LinkDownload and run the installer, then keep clicking next until the installation is complete.When this screen appears, press 3 and Enter to finish the installation.JekyllNow, you’ll find Start Command Prompt with Ruby in the start menu. Run it and in your local GitHub blog repository, enter:gem install jekyllgem install bundlerto install Jekyll and Bundler. Just to be sure, check if the installation was successful with:ruby -vjekyll -vbundler -vIf you see something like this, it means the installation was successful (note that versions may vary depending on the time of installation).3. Install Node.js and npm  Node.js DownloadDownload and install Node.js, then in the Command Prompt, run:npm install &amp;&amp; npm run buildThis prevents complaints about missing *.min.js files when building with Jekyll.4. Install the Chirpy ThemeDelete the doc folder in your local blog folder. You can also delete the contents of the _posts folder, but you can leave them to check if everything works correctly after local or GitHub deployment.In the .github/workflows folder of your local blog, delete everything except the file named pages-deploy.yml.hook, and remove the .hook extension to turn it into a .yml file.Then run:bundleto install the theme.5. Check LocallyEnter:bundle exec jekyll serve --liveReloadand type localhost:4000 in any browser to see how your blog will look when deployed. The --liveReload option automatically reflects any changes made to the page files in the blog view.6. Set Up GitHub ActionIf the blog displays correctly, it’s time to upload it to GitHub. However, the Chirpy theme requires automatic build and deployment via GitHub Actions, so let’s set that up first.Go to Settings in your blog’s GitHub repository, then to Pages in the left tab, and under Source, change Deploy from a branch to GitHub Actions.After clicking Configure in the box that appears, you don’t need to change anything else. Just click Commit changes… in the top right corner to finish the deployment setup.7. Modify _config.yml and Prepare for Remote BuildPull UpdatesFirst, since modifications have been made remotely (added an Action, changes within .github/workflow),git pullis used to update the version.Update *.min.js in .gitignoreIn the local root folder, the .gitignore file needs to be modified.At the very bottom,# Miscassets/js/distadd a # in front of assets to comment it out.# Misc# assets/js/distThis is necessary so that the *.min.js files created by npm can be pushed correctly.Editing _config.ymlOpen the _config.yml file in the root folder and modifyurl: \"\"to include your GitHub page address in the “”. For instance, I use the domain hionpu.com, so I wroteurl: \"hionpu.com\"Additionally, you can modify other settings according to your needs, such aslanguages: ['ko', 'en']...default_lang: 'ko'...timezone: Asia/Seoul...title: Blog Nametagline: Sentence Under the Blog Namedescription: Description of the Blog...github:\tusername: YourGitHubUsername...Generally, areas that should not be modified are marked with warnings by the original creator of chirpy. This _config.yml file will be frequently modified for other settings in the future.8. Push for Automatic Build and Deploymentgit add *git commit -m \"git blog init\"git push origin mainPush changed files. You can then see the build and deployment happening in the Actions tab of your remote repository. If you see a green light, check your blog at your address (username.github.io) to see if it’s visible online.If you see a red light or the blog isn’t working properly even with a green light, refer to the upcoming post on error cases for solutions.8. Next Article(3) Uploading Posts"
  },
  
  {
    "title": "Setting Up a GitHub Blog (1) - Creating a Repository and Checking the Test Page",
    "url": "/posts/github_blog_1",
    "categories": "[GitHub, jekyll]",
    "tags": "#github, #blog, #jekyll, #polyglot",
    "date": "2023-12-04 15:22:00 +0900",
    





    
    "snippet": "IntroductionIn the past few days, I’ve created a blog on GitHub Pages. Initially, I considered using Tistory or Google Blogspot for my blog, but I was captivated by the strange idea of wanting to s...",
    "content": "IntroductionIn the past few days, I’ve created a blog on GitHub Pages. Initially, I considered using Tistory or Google Blogspot for my blog, but I was captivated by the strange idea of wanting to support multiple languages, which led me to GitHub Pages.Tistory/Blogspot does have multilingual support plugins, but they are either of low quality, difficult to modify translations, or paid, which I didn’t like.There were times during the process when I encountered errors with no information available for resolution, and I thought about just using Tistory. However, I persevered and finally succeeded by persistently consulting GPT. I proceeded in the following steps, and since I used the Chirpy theme, this might not be helpful for those using other themes.Series Post Links(1) Create a Repository and Check the Test Page(2) Applying the Chirpy Theme(3) How to Upload Posts(4) Make the blog supports multiple languages(5) Creating a Sitemap1. Create a RepositoryThe green ‘New’ button on the right side of the GitHub Repositories tab.Select yourself as the owner and enter in the format _.github.io_ (I already created mine, so the red message below shows it already exists).Check ‘Public’ and ‘Add a README file’, then click the green ‘Create Repository’ button below.2. Clone to Your Local Machinen the newly created Repository, click the green &lt;&gt; Code button on the right to find the Https address of your Repository (also visible in the address bar). Copy this and move to the location where you want to clone in a terminal like git bash, thengit clone [copied address]After cloning to your local machine, you will find a folder with the name of the Repository you just created. Enter this folder in the terminal and create a temporary test index file:cd username.github.ioecho \"Hello World\" &gt; index.html3. Push ‘index.html’ and Checkgit add *git commit -m \"Beginning of my git blog\"git push -u origin mainNow, if you go to https://[your account name].github.io, you can see the content written in the index.Next, we will apply a theme.Next Article(2) Applying the Chirpy Theme"
  },
  
  {
    "title": "Drawing Directional Arcs like in Rhino",
    "url": "/posts/directional_angle",
    "categories": "[geometry, arc]",
    "tags": "#rhino, #angle, directedangle, #arc, #geometry",
    "date": "2023-10-11 00:00:00 +0900",
    





    
    "snippet": "Changes as of 2023/12/12  As of 2023/12/12, most of the implementation methods have been changed due to refactoring. The flowchart is still used.1. Understanding the ProblemThere are cases where an...",
    "content": "Changes as of 2023/12/12  As of 2023/12/12, most of the implementation methods have been changed due to refactoring. The flowchart is still used.1. Understanding the ProblemThere are cases where an arc needs to be drawn given three points C, P, Q (center point C and two reference lines CP, CQ).​    Figure 1-1, Arc PQ​Assuming the center point C and the first reference point P are given, let’s assume Q can be freely moved by the user using the mouse cursor.  In Rhino, when drawing an arc (whether drawn directly or when drawing auxiliary lines for functions like Rotate, Revolve), the arc starts to be drawn towards the initial position of the mouse cursor Q relative to CP (see below Figure 1-2).​    Figure 1-2In this state, if the cursor is moved in the direction of increasing the angle without crossing the ray starting at C and passing through P, the length of the arc extends in that direction until it reaches 360 degrees.  If the cursor is moved in the direction of decreasing the angle and crosses the ray CP, then from that point onwards, the arc drawn will have an acute angle of CPQ as its central angle.  2. Analyzing the SituationThis can be represented in a flowchart as follows.​The problems to be solved here are as follows.  1. What is the condition to determine if the cursor has crossed the ray CP?  2. What is the condition to determine that the crossing occurred on the ray CP starting from C, not the entire line?  3. How to reverse the arc after crossing?  3. Preparing the Solution// Explained belowbool isRightRay;int crossSign;​// When a crossing occurs, it's necessary to check if the previous crossing happened on the ray CP. This bool stores the `crossSign` value from the previous crossing event.int oldCrossSign;​// Explained belowbool crossOccured;​// Sign value determining the direction of the arc. If a negative angle is passed to the function drawing the arc, 2π is added to that value.double angleSign = 1.0;​3-1. Determine if the Cursor Crosses the Ray CPIn Windows, the screen coordinate system has the top left corner as the origin, with the positive direction of $y$ downwards and $x$ to the right.The arc should flip only when the mouse cursor $Q$ crosses the ray starting at $C$ and passing through $P$. In all other cases, the central angle of the arc should continue to increase or decrease in the same direction.  First, let’s assume the equation of line CP as \\(y = mx + n\\). Now,      Detect when the mouse crosses the line CP (not the ray, but the infinite line passing through C, P).        Determine if that crossing occurred on the ray CP.  3-1-1. Detect if Cursor Crosses the Line   We will use the cross product. The direction of $\\overrightarrow{CP} \\times \\overrightarrow{CQ}$ changes depending on whether $Q$ is above or below the line CP, so tracking this direction can detect if the mouse cursor has crossed the ray. The direction can be determined by taking the dot product with the $z$ direction unit vector.// Vector CF with x,y components of CQ and z component 0vector3 CF = new Vector3(CQ, 0); // Vector CP with x,y components of CP and z component 0vector3 CP = new Vector3(CP, 0); // Cross product of CF and CPvector3 cross = CF.cross(CP);// z direction unit vectorvector3 zUnit = new Vector3(0,0,1); ​// Set direction to 1 or -1 based on the dot product of CF x CP and zdouble crossSign = cross.Dot(z) &gt; 0 ? 1 : -1;// True if crossing occurred on the 'ray' CPbool crossOccured = false;​3-1-2. Determinine if the Crossing Occurred on the Ray CPThere are two types of rays: when the center of the arc C is to the left of the starting point of the arc radius P, and when it’s to the right. For convenience, let’s call the ray Ray and the case where P is to the right of C, making the Ray extend to the right, as RightRay. First, determine if the line is a RightRay and store it as a bool value.bool isRightRay = C.X &lt;= P.X As shown in the code above, the left/right determination of C, P is made using their x coordinates.  Assuming a crossing has already occurred, the case where cursor Q crosses the ray CP is simply when the x coordinate of Q is also greater than the x coordinate of C.3-2. Implement the Conditions in CodeFollowing the above conditions, the code can be written as follows.if (isRightRay){    if (point.X &gt; C.X)    {        crossOccured = true;        // ----- Part needing explanation ----        if (point.Y &gt; m * point.X + n)        {            angleSign = 1.0;        }        else angleSign = -1.0;        // ------------------------------------    }    else    {        crossOccured = false;    }}The unexplained part in this code is        if (point.Y &gt; m * point.X + n)        {            angleSign = 1.0;        }        else angleSign = -1.0;This part determines the angleSign based on whether the mouse cursor is above (crossing from below to above) or below (crossing from above to below) the line CP after crossing the ray CP, thus drawing the arc in the corresponding direction (the smaller angle formed by CP and CF).Now, we just need to handle the case where it’s not a RightRay.else{    if (point.X &lt;= C.X)    {        crossOccured = true;        if (point.Y &gt; m * point.X + n)        {            angleSign = -1.0;        }        else angleSign= 1.0;    }    else    {        crossOccured = false;    }}The complete code for the DetectCross() function is as follows.Vector2D C;Vector2D F;private void DetectCross(System.Windows.Point point){    Vector2 _CF = F.ToVector2() - C.ToVector2();    Vector2 _CP = point.ToVector2D() - C.ToVector2();​    Vector3 CF = new Vector3(_CF, 0);    Vector3 CP = new Vector3(_CP, 0);    Vector3 z = new Vector3(0, 0, 1);    Vector3 cross = Vector3.Cross(CF, CP);​    crossSign = cross.Dot(z) &gt; 0 ? 1 : -1;​    if (oldCrossSign != crossSign)    {        if (isRightRay)        {            if (point.X &gt; C.X)            {                crossOccured = true;                if (point.Y &gt; m * point.X + n)                {                    angleSign = 1.0;                }                else angleSign = -1.0;            }            else            {                crossOccured = false;            }        }        else        {            if (point.X &lt;= C.X)            {                crossOccured = true;                if (point.Y &gt; m * point.X + n)                {                    angleSign = -1.0;                }                else angleSign= 1.0;            }            else            {                crossOccured = false;            }        }    }}​3-3. Apply to Mouse Event Handlerprivate void MouseMove(object sender, MouseEventArgs e){    var mousePos = e.GetPosition(screen);    _refPoint = screen.ScreenToWorld(mousePos, _plane);​    if (_refPoint != null)    {        DetectCross(mousePos);        if (crossOccured)        {            crossOccured = false;        }        _angle = GetAngle(_startPoint, _refPoint);        _arc = new Arc(_center, _startPoint, angleSign*_angle, _normal)        oldCrossSign = crossSign;    }}  Retrieve the mouse coordinates on the screen mousePos.  Project the screen coordinates onto the actual plane (_plane) where the arc will be drawn _refPoint.  Use the DetectCross() function to determine if the mouse has crossed the ray CP, and change or maintain angleSign accordingly.  Use the GetAngle() function to calculate the angle between CP (P = _startPoint) and CQ (Q = refPoint, cursor) and store it in _angle. Here, the angle is not calculated using the usual dot product, so it returns the actual value even if it’s more than $\\pi$ (function below).  Insert angleSign * _angle as the central angle parameter in the function creating the arc. Here, the function Arc() draws in the opposite direction if a negative central angle is input.    3-4 Function    Point3D _center;private double GetAngle(Point3D a, Point3D b)       {           if (a == b) return 0;​           Vector3 aa = _center.ToVector3() - a.ToVector3();           Vector3 bb = _center.ToVector3() - b.ToVector3();​           Vector3 nn = aa.Cross(bb);​           double d = nn.Dot(normal);​           double angle = aa.Angle(bb);                      if (d &gt;= 0)           {               return angle;           }           else           {               return Math.PI * 2 - angle;           }       }        When a, b are passed as parameters, the angle between two vectors, starting at _center and ending at a, b respectively, is calculated. If the direction of the plane’s normal and the cross product of Vector3 aa, bb (determined by dot product) are the same, the angle is returned as is. If the directions are different, the angle subtracted from $2\\pi$ is returned, allowing to obtain the actual value of the angle even if it’s greater than $\\pi$, depending on normal.  "
  }
  
]

